import java.util.ArrayList;

public class ClosestArrestFind {

    public static Arrest find(Location toFind){
        Arrest toReturn = null;
        double shortestDistance = 10000000000.0;

        //change last parameter for different threshold-----------------------------------------------------------VVVVV
        ArrayList<Arrest> closestList =  DataManipulation.findClosestArrests(DataManipulation.sorted, toFind, 0.05);

        Arrest[] closefind = closestList.toArray(new Arrest[closestList.size()]);
        System.out.println("\nPrinting the # of close arrests:\n" + closefind.length + "\n\nPrinting the close arrests:");

        //prints the closest arrests
        for(Arrest c: closefind){
            System.out.println(c);

            double distance = DataManipulation.distance(toFind.getXcrd(), toFind.getYcrd(),
                    c.getLocation().getXcrd(), c.getLocation().getYcrd());
            
            if(distance < shortestDistance){
                shortestDistance = distance;
                toReturn = c;
            }
        }


        //store the found arrest (closest to location specified)
        Arrest found = toReturn;

        //set up graph with first vertex as the found arrest and the rest as the ones close to it
        EdgeWeightedGraph g = new EdgeWeightedGraph(closefind.length + 1);
        g.addVertex(found);
        for(Arrest c: closefind){
            g.addVertex(c);
            System.out.println(g.vertexID());
        }

        //determine the distance from the found arrest to each of its close arrests and create edges
        ArrayList<Edge> edges = new ArrayList<Edge>();

        for(Arrest c: closefind){
            double distance = DataManipulation.distance(found.getLocation().getXcrd(), found.getLocation().getYcrd(),
                    c.getLocation().getXcrd(), c.getLocation().getYcrd());
            Vertex v = g.arrestToVertex(found);
            Vertex w = g.arrestToVertex(c);
            Edge toAdd = new Edge(v, w, distance);
            edges.add(toAdd);
            g.addEdge(toAdd);
        }

        
        PrimMST p = new PrimMST(g);
        for (Edge e: k.edges()){
            System.out.println(e.weight());
        }
        
        Edge min = new Edge(null,null, 10000000);
        for (Edge e: edges){
            if (e.weight() < min.weight()){
                min = e;
            }
        }

        System.out.println(min.weight());
        return min.getNonCentralArrest();
    }
}